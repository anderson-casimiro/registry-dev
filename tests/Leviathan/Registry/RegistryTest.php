<?php
namespace Leviathan\Registry;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-14 at 19:07:09.
 */
class RegistryTest extends ContainerTest
{
    public function setUp()
    {
        
    }

    public function tearDown()
    {
        
    }

    /**
     * @dataProvider storageProvider
     */
    public function testNonRetrieve($test)
    {
        Registry::fill($test);
        $this->assertEquals(null, Registry::get('c:old:namespace'));
    }

    /**
     * @dataProvider storageProvider
     */
    public function testRemove($test, $expected)
    {
        $expectedKey = key(array_reverse($expected));
        Registry::fill($test);
        $expectedValue = $expected[$expectedKey];
        Registry::set('my:var', rand(1, 9999));
        $this->assertInternalType('boolean', Registry::exists($expectedKey));
        $this->assertTrue(Registry::exists($expectedKey));
        Registry::remove($expectedKey);
        $this->assertNull(Registry::get($expectedKey));
        $this->assertNotEquals($expectedValue, Registry::get($expectedKey));
        $this->assertFalse(Registry::exists($expectedKey));
    }

    /**
     * @dataProvider storageProvider
     */
    public function testGet($test, $expected)
    {
        $expectedKey = key(array_reverse($expected));
        $valueToTest = current(array_reverse($this->flatten($test)));
        Registry::fill($test);
        $this->assertEquals($valueToTest, Registry::get($expectedKey));
    }

    public function testSet()
    {
        $storeResult = Registry::set('name', 'Registry');
        $this->assertEquals(true, $storeResult);
    }
    
    /**
     * @expectedException BadMethodCallException
     */
    public function testBadCall()
    {
        Registry::register('foo', 'bar');
    }
}
